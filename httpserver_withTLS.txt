#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <pthread.h>
#include <openssl/ssl.h>
#include <openssl/err.h>
#include <sys/socket.h>
#include <sys/types.h>
#include <netinet/in.h>
#include <signal.h>

#define PORT 9443         // Changed from 8080 to 9443 for TLS
#define MAX_CLIENTS 100
#define BUFFER_SIZE 1024

// Global SSL context (simplified for demo; in production code, handle errors more robustly)
static SSL_CTX *global_ctx = NULL;

typedef struct {
    int client_sock;
    struct sockaddr_in client_addr;
    SSL *ssl; // TLS: Each client gets its own SSL object
} client_info_t;

// ============================================================================
// Function: init_ssl_context
// Description: Initializes the global SSL_CTX, loads certificate and key,
//              and optionally disables TLS 1.3 for easier handshake visibility.
// ============================================================================
void init_ssl_context(const char *cert_file, const char *key_file)
{
    // Initialize OpenSSL library
    SSL_load_error_strings();
    OpenSSL_add_ssl_algorithms();

    // Create a new server method; for strict TLS 1.2, you can use TLS_server_method()
    const SSL_METHOD *method = TLS_server_method();
    global_ctx = SSL_CTX_new(method);
    if (!global_ctx) {
        perror("Unable to create SSL context");
        ERR_print_errors_fp(stderr);
        exit(EXIT_FAILURE);
    }

    // Uncomment this to disable TLS 1.3 if you specifically want TLS 1.2 only:
    // SSL_CTX_set_options(global_ctx, SSL_OP_NO_TLSv1_3);

    // Set the certificate and private key
    if (SSL_CTX_use_certificate_file(global_ctx, cert_file, SSL_FILETYPE_PEM) <= 0) {
        ERR_print_errors_fp(stderr);
        exit(EXIT_FAILURE);
    }
    if (SSL_CTX_use_PrivateKey_file(global_ctx, key_file, SSL_FILETYPE_PEM) <= 0) {
        ERR_print_errors_fp(stderr);
        exit(EXIT_FAILURE);
    }

    // Verify that the private key and certificate match
    if (!SSL_CTX_check_private_key(global_ctx)) {
        fprintf(stderr, "Private key does not match the certificate public key\n");
        exit(EXIT_FAILURE);
    }

    printf("SSL context initialized. Using cert: %s and key: %s\n", cert_file, key_file);
}

// ============================================================================
// Function: handle_client
// Description: Thread entry point that handles communication with each client,
//              including the TLS handshake and reading/writing over SSL.
// ============================================================================
void *handle_client(void *arg)
{
    client_info_t *cinfo = (client_info_t *)arg;
    SSL *ssl = cinfo->ssl; // SSL object created per client

    // Perform TLS handshake
    if (SSL_accept(ssl) <= 0) {
        ERR_print_errors_fp(stderr);
        goto cleanup;
    }

    printf("TLS handshake successful. Client connected: %s:%d\n",
           inet_ntoa(cinfo->client_addr.sin_addr), ntohs(cinfo->client_addr.sin_port));

    // Simple HTTP-like response
    char buffer[BUFFER_SIZE];
    memset(buffer, 0, sizeof(buffer));

    // TLS read
    int bytes_read = SSL_read(ssl, buffer, sizeof(buffer) - 1);
    if (bytes_read <= 0) {
        ERR_print_errors_fp(stderr);
        goto cleanup;
    }
    printf("[Client %s:%d] Received:\n%s\n",
           inet_ntoa(cinfo->client_addr.sin_addr), ntohs(cinfo->client_addr.sin_port), buffer);

    // Respond with a simple HTTP message
    const char *response =
        "HTTP/1.1 200 OK\r\n"
        "Content-Type: text/plain\r\n"
        "Connection: close\r\n"
        "\r\n"
        "Hello from TLS server!\r\n";
    SSL_write(ssl, response, strlen(response));

cleanup:
    // TLS: free the SSL object
    if (ssl) {
        SSL_shutdown(ssl);
        SSL_free(ssl);
    }
    // Close the client socket
    close(cinfo->client_sock);
    free(cinfo);
    pthread_exit(NULL);
}

// ============================================================================
// Function: main
// Description: Creates a server socket, initializes SSL context, accepts clients,
//              and spawns threads to handle each client with TLS.
// ============================================================================
int main(int argc, char *argv[])
{
    signal(SIGPIPE, SIG_IGN); // Avoid SIGPIPE on SSL_writes to closed connections

    // 1) Initialize the SSL context with your PEM files (certificate & key).
    //    Make sure cert.pem and key.pem are generated (e.g., using openssl).
    init_ssl_context("cert.pem", "key.pem");

    int server_sock;
    struct sockaddr_in server_addr;
    pthread_t tid;

    // 2) Create socket
    if ((server_sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
        perror("socket() failed");
        exit(EXIT_FAILURE);
    }

    int optval = 1;
    setsockopt(server_sock, SOL_SOCKET, SO_REUSEADDR, &optval, sizeof(optval));

    // 3) Setup server address
    memset(&server_addr, 0, sizeof(server_addr));
    server_addr.sin_family = AF_INET;
    server_addr.sin_addr.s_addr = INADDR_ANY;
    server_addr.sin_port = htons(PORT);

    // 4) Bind socket
    if (bind(server_sock, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {
        perror("bind() failed");
        close(server_sock);
        SSL_CTX_free(global_ctx);
        exit(EXIT_FAILURE);
    }

    // 5) Listen for connections
    if (listen(server_sock, MAX_CLIENTS) < 0) {
        perror("listen() failed");
        close(server_sock);
        SSL_CTX_free(global_ctx);
        exit(EXIT_FAILURE);
    }
    printf("TLS server listening on port %d...\n", PORT);

    // 6) Accept connections
    while (1) {
        client_info_t *cinfo = malloc(sizeof(client_info_t));
        if (!cinfo) {
            perror("malloc() failed");
            continue; // or break if you want to exit on error
        }

        socklen_t client_len = sizeof(cinfo->client_addr);
        cinfo->client_sock = accept(server_sock,
                                    (struct sockaddr *)&cinfo->client_addr,
                                    &client_len );
        if (cinfo->client_sock < 0) {
            perror("accept() failed");
            free(cinfo);
            continue;
        }

        // Create a new SSL object for this client
        cinfo->ssl = SSL_new(global_ctx);
        if (!cinfo->ssl) {
            fprintf(stderr, "SSL_new() failed\n");
            close(cinfo->client_sock);
            free(cinfo);
            continue;
        }

        // Link the SSL object with the socket
        SSL_set_fd(cinfo->ssl, cinfo->client_sock);

        // 7) Spawn a thread to handle each client
        if (pthread_create(&tid, NULL, handle_client, (void *)cinfo) != 0) {
            perror("pthread_create() failed");
            SSL_free(cinfo->ssl);
            close(cinfo->client_sock);
            free(cinfo);
            continue;
        }
        pthread_detach(tid);
    }

    // (In this basic example, we never reach here, but let's keep it for completeness.)
    close(server_sock);
    SSL_CTX_free(global_ctx);
    EVP_cleanup();
    return 0;
}
